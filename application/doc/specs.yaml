openapi: 3.0.0
info:
  description: API Documentation
  version: 1.0.0
  title: API documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: greetings
    description: Different way to greet people
paths:
  /hello:
    options:
      summary: CORS support
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            { "statusCode" : 200 }
        responses:
          "default":
            statusCode: "200"
            headers:
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        "200":
          description: Default response for CORS method
    get:
      tags:
        - greetings
      summary: Hello
      description: "Say hello and gives a queue number"
      operationId: hello
  
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
        "403":
          description: Unauthorize
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - securityCognitoPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppName}-${GreetingsModuleFunctionName}-${Env}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  
servers:
  - url: http://localhost:8080/
components:
  securitySchemes:
    securityCognitoPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs: 
          - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
  schemas:
    Greeting:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string